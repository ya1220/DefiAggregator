NEXT STEPS:

why balances calculated wrong
PF which not in available pools not added to leftovers

upgrade hosting
launch website as service script
fix posting of data on live website

change pool/pool single token convention
specify for what unit of time the volume is

Check + fix optimisation with live examples
Risk setting - to optimisation

fmt.Printf("%+v\n", yourProject)

sort all dates arrays before saving (also in Volatility)

Fix curve wrong volumes

Interest in balancer? - pools against BAL
Check balancer results manually

Start saving hist uniswap data
calculate_historical_uniswap_volume_and_pool_sz
Get uniswap ratios
sort.Float64s(fltSlice) - replace finding argmax

Volatility using package - https://www.golangprograms.com/go-programming-language-packages/golang-statistics-package.html
a, _ = stats.StandardDeviationSample([]float64{1, 2, 3})

reduce height of top UI section
alignment on current portfolio

Optimisation - gas price
Optimisation - with swaps

Switch all times to UTC

balancer native token reward
Balancer - include all 8 tokens

delete duplicates from db
Why is VolumeUSD so different from actual daily pair volume?

implement reset button
implement refresh button
add 	  remove button

Compound

user sessions
with restart script

metamask
Add risk rating of destination pools

HOW TO COMPILE
go to ui folder
cmd: 'npm run build' 
zip build folder
upload to cpanel
unzip within public_html
compile main.go into a linux executable: 
cmd: 'set GOOS=linux'
cmd: 'go build'
upload to cpanel
go to terminal in cpanel
run: 'PORT=2000 ./source'


COMPLETE ------------------------------------------------------------------------------------------
add portfolio % to starting + $ value
how to present optimised, by pool or by token?
ratio in optimised is off
Compile to website
add ratio to pools ranked
add ratio to optimiser results
Add value / USD value in optimiser
Format numbers on front end - 2 decimals with actual %
implement channels on actual data funcs
check hist px calc
Check balancer liquidity ranking
get rid of gen name duplicate
create db retrieval func just for ratio
Add recency check to Aave
retrieve 1 record, not all - faster
Fix balancer wrong volumes
Balancer - delete duplicate data from DB
Add saving pool id to DB - for balancer + duplicate pools of same token
uniswap query vars part of db
Ensure does not update too much data on each rerun
% hist volatility in balancer wrong
closest to days ago date wrong
Add which i of pool is being processed
Error 654 - px return hist
hist volume should check if duplicating record
Print is - why so many pools in balancer? which one is which
Only print pools which pass filter

Why balancer always tries to download duplicate data
//Check retrieving data2 - if dates do match
returns twice in optimised
Ensure adding tokens works
Add popup boxes explaining what each window does
Add dark lite mode to front end
Impermanent loss estimator function
1 year old data - fixed with desc
Add not investment advice disclaimer
ETH volatility is 420
WBTC/WETH volatility
WETH/USDT volatility
WBTC/DAI volatility
Fix USDC/WETH volatility calc - currently outputs zero
Make sure no Inf/NaN in calcs
Connect Database
Finish future volume estimator function - fix errors
Implement calculateROI properly
Fix Uniswap downloader for historical volumes
UI + populate risk from UI		- bring to match our report 1
JS + Golang Tests			- complete?
isHistDataAlreadyDownloaded 		- done (Check for dates can add later)
calculatehistoricalvolatility 		- Need to check if gives right output
NewHistoricalCurrencyDataFromRaw 	- done
retrieveDataForTokensFromDatabase 	- done
Aave data pulling implementation	- check to confirm j loop in tokenqueue is 1 element
Create risk var in database				- done 
WETH Data not downloading correctly 	- done
Why runs 3x?							- done
Implement MongoDB historical interface functions
Add pair-uniswap id mapping to database - instead of 1000 records
/*
Check balance units - ok
Add database linkage - ok
Check ROI result makes sense
Add BAL token return component

Get historical balances
Volumes as floats
Missing zeros - fix
*/

func isHistDataAlreadyDownloaded(token string, database *Database) bool {
func retrieveDataForTokensFromDatabase(token0 string, token1 string, database *Database) HistoricalCurrencyData {
func (database *Database) RankBestCurrencies() {
database.historicalcurrencydata = append(database.historicalcurrencydata, Histrecord)
len(database.historicalcurrencydata)

i.e. we need to get the database pointer out - and have the ability to retrieve and append structs from/to actual database
func isHistDataAlreadyDownloaded(token string) bool - which will query the historical database and tell if data is present for the token - MODIFICATION OF EXISTING
func retrieveDataForTokensFromDatabase(token0 string, token1 string) HistoricalCurrencyData - gets the pair price in form of a HistoricalCurrencyData struct - MODIFICATION OF EXISTING
func appendHistPriceDataToDb(HistoricalCurrencyData) - appends a record (raw form is HistoricalCurrencyData) to the actual database - NEW
func getLenPrices(string token) - gets number of non-empty price records in database for given token - NEW 
func getLenDates(string token) - gets number of non-empty date records in database for given token - NEW
func getLen() - gets number of tokens with historical records in database - NEW



TO BUILD AND RUN
not found doge prices
actual returns vs px ret avg

move everything from ui into main folder (cut + paste all contents of UI into main running-results-table directory)
compile react app with 'npm run build' from cmd
set GOOS=linux - to compile the golang for web server
go build - to compile running-results-table into a linux executable
upload it to public_html folder
enable permissions on the executable - to run
Upload both the contents of build folder (it is created by npm build) and the go executable to cpanel
Open terminal in cpanel
cd to public_html

run: PORT=1234 ./running-results-table

https://hackersandslackers.com/deploy-golang-app-nginx/
https://stackoverflow.com/questions/25024893/deploy-and-build-my-go-app-on-my-server
http://kumargaurav.co/2016/08/10/deploy-go-lang-app-linux-server/
https://www.digitalocean.com/community/tutorials/how-to-deploy-a-go-web-application-using-nginx-on-ubuntu-18-04
https://www.digitalocean.com/community/tutorials/how-to-deploy-a-go-web-application-using-nginx-on-ubuntu-18-04
https://codefresh.io/docs/docs/learn-by-example/golang/goreleaser/
https://freshman.tech/web-development-with-go/
https://dev.to/koddr/how-to-deploy-golang-application-on-any-gnu-linux-system-but-without-docker-59m1
https://blog.scottlogic.com/2017/02/28/building-a-web-app-with-go.html
https://livebook.manning.com/book/go-web-programming/chapter-10/38
https://dev.to/crishanks/deploy-host-your-react-app-with-cpanel-in-under-5-minutes-4mf6

https://github.com/TrueBlocks/trueblocks-core#using-chifra
https://gist.github.com/ryanfitz/4191392

https://forum.golangbridge.org/t/deploying-a-golang-react-app-on-a-web-server/23507
https://astaxie.gitbooks.io/build-web-application-with-golang/content/en/
https://rshipp.com/go-react-frontend/
http://rosalita.github.io
https://github.com/sohamkamani/

Goxygen
Buffalo
Revel

- The interest rate payment on loans - depositors share the interests paid by 
borrowers corresponding to the average borrow rate times the utilisation rate. 
The higher the utilisation of a reserve the higher the yield for depositors
utilisation rate = Total borrows / Total liquidity

- 70% of the Flash Loan fees - depositors receive a share of the Flash Loan 
fees corresponding to .063% of the Flash Loan volume.

1) Get historical borrow and unitilisation rates 
- contract to get borrow rates: 0x7937D4799803FbBe595ed57278Bc4cA21f3bFfCB
- topic0 of Borrow event: 0xc6a898309e823ee50bac64e45ca8adba6690e99e7841c45d754e2a38e9019d9b
- 
2) Get historical flash loans fees




keep running server

separately 

poll time
run update func
if any change --> notify ch2
notify ch3

enter new pf item
	notify raw pf ch1
	reoptimise
	notify optimised pf ch3
		
	Add startingpf --> optimisepf
	
	https://github.com/jmcnamara/libxlsxwriter
	https://github.com/seleznevae/libfort
	https://github.com/p-ranav/tabulate